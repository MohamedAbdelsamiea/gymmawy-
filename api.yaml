openapi: 3.0.3

info:
  title: Tabby API Reference
  x-logo:
    url: 'assets/tabby-new.png'
    altText: tabby Logo
  description: |
      Tabby Documentation:  **[docs.tabby.ai](https://docs.tabby.ai/)**

servers:
  - url: https://api.tabby.ai/
    description: Production

tags:
  - name: Checkout
    description: Checkout is a whole process of customer data collection and payment authorization.
  - name: Payments
    description: The core of tabby is a payments flow enabling you to handle payments at your webstore.
  - name: Webhooks
    description: Manage webhook endpoints.
  - name: Disputes
    description: The Disputes API is designed to simplify the process of handling disputes and help merchants resolve issues with customer orders more efficiently. Merchants can use this API to retrieve a list of disputes, view details about a specific dispute, and approve or challenge a bunch of disputes. It mirrors the functionality available in Tabby Merchant Dashboard and operates exclusively with live payments using live credentials. A secret key is required for using the Disputes API.
  - name: checkoutSessionModel
    x-displayName: The Checkout Session Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/CheckoutSession" />
  - name: paymentModel
    x-displayName: The Payment Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Payment" />
  - name: tokenPaymentModel
    x-displayName: The Token Payment Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TokenPayment" />
  - name: buyerModel
    x-displayName: The Buyer Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Buyer"  exampleRef="#/components/examples/Buyer" />
  - name: buyerHistoryModel
    x-displayName: The Buyer History Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/BuyerHistory" />
  - name: orderModel
    x-displayName: The Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Order" />
  - name: orderItemModel
    x-displayName: The Order Item Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/OrderItem" />
  - name: orderHistoryModel
    x-displayName: The Historical Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/OrderHistory" />
  - name: shippingAddressModel
    x-displayName: The Shipping Address Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ShippingAddress" />
  - name: paymentCaptureModel
    x-displayName: The Payment Capture Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/PaymentCapture" />
  - name: paymentRefundModel
    x-displayName: The Payment Refund Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/PaymentRefund" />
  - name: webhookModel
    x-displayName: The Webhook Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Webhook" />


x-tagGroups:
  - name: API
    tags:
      - Checkout
      - Payments
      - Webhooks
      - Disputes
  - name: Models
    tags:
      - checkoutSessionModel
      - paymentModel
      - buyerModel
      - buyerHistoryModel
      - orderModel
      - orderItemModel
      - orderHistoryModel
      - shippingAddressModel
      - paymentCaptureModel
      - paymentRefundModel
      - webhookModel


paths:
  /api/v2/checkout:
    post:
      tags:
        - Checkout
      summary: Create a session
      description: Creates a Checkout session. Creates Session and Payment, returns Pre-Scoring result (status), ids of Payment and Session. 
      operationId: postCheckoutSession
      security:
        - bearerAuth: [ secret_key ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment:
                  $ref: '#/components/schemas/Payment'
                lang:
                  type: string
                  enum: [ar, en]
                  description: Session language, used to launch HPP with desired language.

                merchant_code:
                  type: string
                  description: Please contact your integration manager to get the codes.

                merchant_urls:
                  type: object
                  description: Used for redirecting the customer after the tabby HPP flow. Required for Web integration, optional for Mobile App integration.
                  properties:
                    success:
                      type: string
                      format: uri
                      example: "https://your-store/success"
                      description: URL to redirect the customer to merchant's 'Thank you' page after success payment. Payment status = Authorized or Closed.
                    cancel:
                      type: string
                      format: uri
                      example: "https://your-store/cancel"
                      description: URL to redirect the customer back to merchant's Checkout page after payment cancellation by customer. Payment status = Expired.
                    failure:
                      type: string
                      format: uri
                      example: "https://your-store/failure"
                      description: URL to redirect the customer back to merchant's Checkout page after payment rejection by Tabby. Payment status = Rejected.

                token:
                  type: string
                  default: null
                  description: |
                    If you already have `token`, you can pass it there. Authorization header requires Secret Key instead of Public Key.

              required:
                - payment
                - lang
                - merchant_code
      responses:
        '200':
          $ref: '#/components/responses/CheckoutSession'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v2/checkout/{id}:
    get:
      tags:
        - Checkout
      summary: Retrieve an existing checkout session
      description: Use this API to retrieve the token (only if tokens used in your integration )
      operationId: getCheckoutSession
      security:
        - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/sessionIdParam'
      responses:
        '200':
          $ref: '#/components/responses/CheckoutSession'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v2/payments/{id}:
    get:
      tags:
      - Payments
      summary: Retrieve a payment
      description: Retrieves the specified payment. Returns the entire payment object, including the payment Status, Captures and Refunds objects.
      operationId: getPayment
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/paymentIdParam'
      responses:
        '200':
          $ref: '#/components/responses/Payment_v2'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
      - Payments
      summary: Update a payment
      description: Updates the reference_id or sets delivery_tracking. You can only use this endpoint to update these 2 fields. If you send other fields in the request, they will simply be ignored by tabby. The payment to be updated can have a status of AUTHORIZED or CLOSED.
      operationId: putPayment
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/paymentIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: object
                  properties:
                    reference_id:
                      type: string
                      description: Merchant-assigned order or cart ID.
                delivery_tracking:
                  type: array
                  description: Array of objects with tracking_number and courier_code for tracking delivery. You can add one or more new track numbers as they become available
                  items:
                    type: object
                    properties:
                      tracking_number:
                        type: string
                      courier_code:
                        type: string
                        description: >
                            The code of the courier. Must match one of the courier codes from https://www.trackingmore.com/download-couriers.php
                          
                            Popular examples:
                              - `aramex`
                              - `smsa-express`
                              - `naqel`
                              - `tnt`
                              - `imile`
                              - `dsv`
                              - `dhl`
                              - `17feia`
                              - `tnt-uk`
                              - `jtexpress-vn`
                              - `dhlglobalmail`
                              - `amazon`
                              - `ecom-express`
                              - `139express`
                              - `jet`
                              - `hnfywl`
                              - `jt-express`
                              - `jtexpress`
                              - `sfb2c`
                              - `shipa`
                              - `abxexpress-my`
                              - `china-post`
                              - `saudi-post`
                              - `fastway-au`
                              - `zajil`
                              - `dpd-uk`
                              - `2go`
                              - `australia-post`
                              - `gls`
                              - `fedex`
                    required:
                      - tracking_number
                      - courier_code
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v2/payments/{id}/captures:
    post:
      tags:
      - Payments
      summary: Capture a payment
      description: Send a Capture requests for Authorized payments only. If you capture the full payment amount, the payment will be automatically closed with full capture. If you capture partial amount, the payment will remain Authorized until the rest of the amount is captured or Close request sent.
      operationId: postPaymentCapture
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/paymentIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCapture'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v2/payments/{id}/refunds:
    post:
      tags:
      - Payments
      summary: Refund a payment
      description: Send a full or partial refund amount request. You can only refund the payment that has Closed status. By default refunds reflect instantly, which means Tabby initiates a refund throgh payment gateway. By request, 'Delayed Refunds' option can be enabled - there will be a 24 hours gap between the moment when Refund API is called and when it was actually initiated. During this time the refund can be cancelled via deletePaymentRefund API; another refund for the same payment id cannot be processed until the 1st one is either processed or deleted.
      operationId: postPaymentRefund
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/paymentIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRefund'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/RefundError'  
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v2/payments/{id}/close:
    post:
      tags:
      - Payments
      summary: Close a payment
      description: Closed is the final status of the payment. Your payment is going to be closed automatically if you capture the full amount of the payment. If an order is fully cancelled, please close the payment without capturing it - the customer will be refunded for all paid amount. If only a part of the order is delivered, please capture this part and close the payment – it will mean that another part of the order is not going to be delivered to the customer.
      operationId: closePayment
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/paymentIdParam'
      responses:
        '200':
          $ref: '#/components/responses/Payment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v2/payments:
    get:
      tags:
      - Payments
      summary: List of all payments
      description: Returns a list of success payments (Authorized or Closed) you’ve previously created. The payments are returned in sorted order, with the most recent payments appearing first. Each entry in the array is a separate payments object, including the status, any captures and any refunds. If no more payments are available, the resulting array will be empty. Payments might be filtered by creation date.
      operationId: getPayments
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - in: query
          name: created_at__gte
          schema:
            type: string
            format: date
          description: This is a filter for the payment creation date, use it to get the list of payments where creation date >= created_at__gte. ISO 8601 date time format (greater than or equal). No time should be provided, it starts at 00:00:00 be default. For example 2020-01-23 -> 2020-01-23T00:00:00Z. 
        - in: query
          name: created_at__lte
          schema:
            type: string
            format: date-time
          description: This is a filter for the payment creation date, use it to get the list of payments where creation date <= created_at__lte. ISO 8601 date time format (less than or equal). No time should be provided, it starts at 00:00:00 be default. For example 2020-01-23 -> 2020-01-23T00:00:00Z. 
        - in: query
          name: limit
          schema:
            type: integer
            maximum: 20
          description: Limits the number of returned results.                   
        - in: query
          name: status
          schema:
            type: string
            enum: [authorized, closed, rejected, new, captured, refunded, cancelled]
          description: Filter the orders by specific statuses. "authorized", "closed" and "rejected" belong to the API payment statuses, while "new", "captured", "refunded" and "cancelled" refer to the statuses from Tabby Merchant Dashboard. If absent, all authorized and closed payments are returned. 
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of records into a dataset that you want to start, indexed at 0.
      responses:
        '200':
          $ref: '#/components/responses/Payments'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        default:
          $ref: '#/components/responses/UnexpectedError'  

  /api/v1/webhooks:
    post:
      tags:
      - Webhooks
      summary: Register a webhook
      description: Creates a new webhook
      operationId: postWebhook
      security:
      - bearerAuth: [ secret_key ]
      parameters:
       - $ref: '#/components/parameters/merchantCodeParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      tags:
      - Webhooks
      summary: Retrieve all webhooks
      description: Retrieves all registred webhooks.
      operationId: getWebhooks
      security:
      - bearerAuth: [ secret_key ]
      parameters:
       - $ref: '#/components/parameters/merchantCodeParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v1/webhooks/{id}:
    get:
      tags:
      - Webhooks
      summary: Retrieve a webhook
      description: Retrieves the specified webhook.
      operationId: getWebhook
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/webhookIdParam'
        - $ref: '#/components/parameters/merchantCodeParam'
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
      - Webhooks
      summary: Update a webhook
      description: Updates the specified webhook.
      operationId: putWebhook
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/webhookIdParam'
        - $ref: '#/components/parameters/merchantCodeParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_test:
                  type: boolean
                  description: Indicates whether to use this hook in test environment or not.
                url:
                  type: string
                  description: HTTPS endpoint for notifications.
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
      - Webhooks
      summary: Remove a webhook
      description: Removes the specified webhook.
      operationId: deleteWebhook
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/webhookIdParam'
        - $ref: '#/components/parameters/merchantCodeParam'
      responses:
        '200':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /api/v1/disputes:
    get:
      tags:
      - Disputes
      summary: Get disputes list
      description: Returns list of 100 recently created disputes.
      operationId: getDisputes
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - in: query
          name: statuses
          schema:
            type: Array of strings (DisputeStatus)
            enum: [new, declined, cancelled, refunded, in_progress]
            example: statuses=new&statuses=declined
          description: Dispute status. If not set, then all statuses will be in result.
        - in: query
          name: created_at_gte
          schema:
            type: string
            example: created_at_gte=2022-12-01T00:00:00Z
          description: Filter disputes created after or at the specified date and time.
        - in: query
          name: created_at_lte
          schema:
            type: string
            example: created_at_lte=2022-12-01T00:00:00Z
          description: Filter disputes created before or at the specified date and time.
        - in: query
          name: page_token
          schema:
            type: string
          description: To load the next page of disputed items provide page token. This code can be obtained from the `next_page_token` variable in the response of dispute list. If `next_page_token` is empty in response, it means last page of disputes has been reached.
      responses:
        '200':
          $ref: '#/components/responses/Disputes'
        '400':
          $ref: '#/components/responses/RequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/disputes/{disputeId}:
    get:
      tags:
      - Disputes
      summary: Get dispute by id
      description: Returns detailed information about dispute.
      operationId: getDispute
      security:
      - bearerAuth: [ secret_key ]
      parameters:
        - $ref: '#/components/parameters/disputeIdParam'
      responses:
        '200':
          $ref: '#/components/responses/Dispute'
        '400':
          $ref: '#/components/responses/RequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/disputes/approve:
    post:
      tags:
      - Disputes
      summary: Approve disputes
      description: Approve disputes (refund money to the customer). Only 20 disputes can be approved within a single request.
      operationId: postDisputesApprove
      security:
      - bearerAuth: [ secret_key ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dispute_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of dispute ids. Only 20 disputes can be approved within a single request.
              required:
                - dispute_ids
      responses:
        '200':
          $ref: '#/components/responses/DisputesApprove'
        '400':
          $ref: '#/components/responses/RequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'          

  /api/v1/disputes/challenge:
    post:
      tags:
      - Disputes
      summary: Challenge disputes
      description: Challenge disputes (request Tabby support to take a look at the case). Only 20 disputes can be challenged within a single request. Only disputes with status 'new' might be challenged.
      operationId: postDisputesChallenge
      security:
      - bearerAuth: [ secret_key ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dispute_id:
                  type: string
                  format: uuid
                  description: ID of the dispute.
                description:
                  type: string
                  description: Comment for Tabby support.
                reason:
                  type: string
                  enum: [merchant_reason_other, merchant_reason_order_on_its_way, merchant_reason_order_has_been_already_delivered, merchant_reason_order_amount_should_be_different, merchant_reason_problem_with_delivery]
                  description: >
                    Reason for requesting dispute challenge:
                      - `merchant_reason_other` - there were other problems with the order that required further clarification;
                      - `merchant_reason_order_on_its_way` - the order has been confirmed and is in the process of being delivered;
                      - `merchant_reason_order_has_been_already_delivered` - the order has already been delivered and is complete;
                      - `merchant_reason_order_amount_should_be_different` - there was a problem with the amount of the order and it needed to be changed;
                      - `merchant_reason_problem_with_delivery` - there was a problem with the order during delivery that needed to be adjusted and resolved.
                amount:
                  type: string
                  description: If the dispute challenged with reason `merchant_reason_order_amount_should_be_different` - a new disputed amount is required.
                attachment_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Attachment ID that will be attached. Id can be received via `upload attachment` endpoint.
              required:
                - dispute_id
                - description
                - reason
      responses:
        '200':
          $ref: '#/components/responses/DisputesChallenge'
        '400':
          $ref: '#/components/responses/RequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/disputes/attachments/upload:
    post:
      tags:
      - Disputes
      summary: Upload attachment
      description: Upload an attachment. Attachment must be in PNG or JPEG format and can be up to 5 megabytes in size.
      operationId: postUploadAttachment
      security:
      - bearerAuth: [ secret_key ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: string
                  format: binary
                  description: Attachment must be in PNG or JPEG format and can be up to 5 megabytes in size.
              required:
                - attachment
      responses:
        '200':
          $ref: '#/components/responses/Attachment'
        '400':
          $ref: '#/components/responses/RequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'          

  /registration/v1/sessions:
    $ref: "components/registration/paths.yaml#/~1registration~1v1~1sessions"

components:
  parameters:
    paymentIdParam:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: ID of the payment.

    webhookIdParam:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: ID of the webhook.
    
    refundIdParam:
      in: path
      name: refund_id
      required: true
      schema:
        type: string
      description: ID of the refund.

    merchantCodeParam:
      in: header
      name: X-Merchant-Code
      required: true
      schema:
        type: string
      description: Used for multi store/countries setup, please contact your Account manager to recognize that

    sessionIdParam:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: ID of the session.

    disputeIdParam:
      in: path
      name: dispute_id
      required: true
      schema:
        type: string
        format: uuid
      description: ID of the dispute.


  responses:
    CheckoutSession:
      description: Success. Checkout session object is returned.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckoutSession'

    Payment:
      description: Success. Payment object is returned.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'

    Payment_v2:
      description: Success. Payment object is returned.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment_v2'

    Payments:
      description: Success. Returns a list of payments.
      content:
        application/json:
          schema:
            type: object
            properties:
              payments:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Webhook:
      description: Success. Webhook object is returned.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'


    UnexpectedError:
      description: Something bad happened. We're notified.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequestError:
      description: One of the required fields is missing or request is not formatted correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    AuthenticationError:
      description: The required authentication header is missing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenError:
      description: You tried to perform an action which is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: You are using an incorrect ID.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RefundError:
      description: Refund is unavailable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Disputes:
      description: Success. Returns a list of disputes.
      content:
        application/json:
          schema:
            type: object
            properties:
              disputes:
                type: array
                items:
                  $ref: '#/components/schemas/DisputeNoHistory'
              next_page_token:
                type: string
            required:
              - disputes
              - next_page_token

    Dispute:
      description: Success. Returns dispute info.
      content:
        application/json:
          schema:
            type: object
            properties:
              dispute:
                type: object (Dispute)
                $ref: '#/components/schemas/Dispute'
            required:
              - dispute
    
    DisputesApprove:
      description: Success. Disputes were approved.
      content:
        application/json:
          schema:
            type: object
            properties:
              disputes:
                type: array
                items:
                  $ref: '#/components/schemas/DisputeNoHistory'  
      
    DisputesChallenge:
      description: Success. Disputes were challenged.
      content:
        application/json:
          schema:
            type: object
            properties:
              disputes:
                type: array
                items:
                  $ref: '#/components/schemas/DisputeNoHistory'

    Attachment:
      description: Success. Attachment was uploaded.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Unique id of attachment 
    
    RequestError:
      description: Request error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUpdated'

    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUpdated'

    NotFound:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorUpdated'

  schemas:
    $ref: './components/schemas/all.yaml'

  examples:
    $ref: './components/examples/all.yaml'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer