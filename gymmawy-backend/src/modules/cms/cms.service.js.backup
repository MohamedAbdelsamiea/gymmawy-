import { getPrismaClient } from '../../config/db.js';

export const getContentService = async () => {
  const prisma = getPrismaClient();
  return prisma.cMSContent.findMany();
};

export const updateContentService = async (id, data) => {
  const prisma = getPrismaClient();
  return prisma.cMSContent.update({
    where: { id: parseInt(id) },
    data: {
      title: data.title,
      content: data.content,
      type: data.type
    }
  });
};

// Transformations
export const getTransformationsService = async (filters = {}) => {
  const prisma = getPrismaClient();
  const { isActive, language, pageSize, sortBy, sortOrder } = filters;
  
  // Build where clause
  const where = {};
  if (isActive !== undefined) {
    where.isActive = isActive;
  }
  
  // Build orderBy clause
  let orderBy = { createdAt: 'desc' };
  if (sortBy) {
    orderBy = { [sortBy]: sortOrder || 'desc' };
  }
  
  // Build query options
  const queryOptions = {
    where,
    orderBy
  };
  
  // Add pagination if pageSize is specified
  if (pageSize) {
    queryOptions.take = pageSize;
  }
  
  return prisma.transformation.findMany(queryOptions);
};

export const createTransformationService = async (data) => {
  const prisma = getPrismaClient();
  return prisma.transformation.create({
    data: {
      title: data.title || { en: 'Transformation', ar: 'تحول' },
      imageUrl: data.imageUrl,
      isActive: data.isActive !== undefined ? data.isActive : true
    }
  });
};

export const getTransformationByIdService = async (id) => {
  const prisma = getPrismaClient();
  return prisma.transformation.findUnique({
    where: { id: id }
  });
};

export const updateTransformationService = async (id, data) => {
  const prisma = getPrismaClient();
  return prisma.transformation.update({
    where: { id: id },
    data: {
      title: data.title,
      imageUrl: data.imageUrl,
      isActive: data.isActive
    }
  });
};

export const deleteTransformationService = async (id) => {
  const prisma = getPrismaClient();
  return prisma.transformation.delete({
    where: { id: id }
  });
};

// Videos
export const getVideosService = async () => {
  const prisma = getPrismaClient();
  return prisma.video.findMany({
    orderBy: { createdAt: 'desc' }
  });
};

export const createVideoService = async (data) => {
  const prisma = getPrismaClient();
  return prisma.video.create({
    data: {
      title: data.title,
      videoUrl: data.videoUrl,
      thumbnailAr: data.thumbnailAr,
      thumbnailEn: data.thumbnailEn,
      isActive: data.isActive !== undefined ? data.isActive : true
    }
  });
};

export const getVideoByIdService = async (id) => {
  const prisma = getPrismaClient();
  return prisma.video.findUnique({
    where: { id: id }
  });
};

export const updateVideoService = async (id, data) => {
  const prisma = getPrismaClient();
  // If trying to set isActive to true, first set all other videos to false
  if (data.isActive === true) {
    await prisma.video.updateMany({
      where: {
        id: { not: id }
      },
      data: {
        isActive: false
      }
    });
  }
  
  return prisma.video.update({
    where: { id: id },
    data: {
      title: data.title,
      videoUrl: data.videoUrl,
      thumbnailAr: data.thumbnailAr,
      thumbnailEn: data.thumbnailEn,
      isActive: data.isActive
    }
  });
};

export const deleteVideoService = async (id) => {
  const prisma = getPrismaClient();
  return prisma.video.delete({
    where: { id: id }
  });
};

// Homepage Popup Services
export const getHomepagePopupService = async () => {
  const prisma = getPrismaClient();
  let popup = await prisma.homepagePopup.findFirst();
  
  // If no popup exists, create a default one
  if (!popup) {
    popup = await prisma.homepagePopup.create({
      data: {
        isActive: false,
        header: { en: "Welcome to Gymmawy", ar: "مرحباً بك في جيماوي" },
        subheader: { en: "Start your fitness journey today!", ar: "ابدأ رحلتك الرياضية اليوم!" },
        imageUrl: null,
        buttonText: { en: "Get Started", ar: "ابدأ الآن" },
        buttonLink: "/join-us"
      }
    });
  }
  
  return popup;
};

export const updateHomepagePopupService = async (data) => {
  const prisma = getPrismaClient();
  console.log('=== updateHomepagePopupService called ===');
  console.log('prisma object:', typeof prisma);
  console.log('prisma.homepagePopup:', typeof prisma.homepagePopup);
  console.log('data received:', data);
  
  let popup = await prisma.homepagePopup.findFirst();
  console.log('Found popup:', popup);
  
  if (popup) {
    // Update existing popup
    console.log('Updating existing popup with id:', popup.id);
    return prisma.homepagePopup.update({
      where: { id: popup.id },
      data: {
        isActive: data.isActive,
        header: data.header,
        subheader: data.subheader,
        imageUrl: data.imageUrl,
        buttonText: data.buttonText,
        buttonLink: data.buttonLink
      }
    });
  } else {
    // Create new popup
    console.log('Creating new popup');
    return prisma.homepagePopup.create({
      data: {
        isActive: data.isActive || false,
        header: data.header || { en: "Welcome to Gymmawy", ar: "مرحباً بك في جيماوي" },
        subheader: data.subheader || { en: "Start your fitness journey today!", ar: "ابدأ رحلتك الرياضية اليوم!" },
        imageUrl: data.imageUrl || null,
        buttonText: data.buttonText || { en: "Get Started", ar: "ابدأ الآن" },
        buttonLink: data.buttonLink || "/join-us"
      }
    });
  }
};
